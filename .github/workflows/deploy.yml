name: Deploy to AWS EC2

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Debug SSH Configuration
      env:
        SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ls -la ~/.ssh
        echo "SSH key setup complete."

    - name: Ensure App Directory Exists on EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
        ${{ secrets.AWS_SSH_USER }}@${{ secrets.AWS_SSH_HOST }} "mkdir -p /home/${{ secrets.AWS_SSH_USER }}/app/vehicle-registration-backend"

    - name: Transfer Files to EC2 Instance
      env:
        SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
      run: |
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r $(pwd)/ \
        ${{ secrets.AWS_SSH_USER }}@${{ secrets.AWS_SSH_HOST }}:/home/${{ secrets.AWS_SSH_USER }}/app/vehicle-registration-backend

    - name: Run Deployment Commands on EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
        ${{ secrets.AWS_SSH_USER }}@${{ secrets.AWS_SSH_HOST }} << 'EOF'
        # Update system and install dependencies
        sudo apt update
        sudo apt install -y software-properties-common
        sudo add-apt-repository -y ppa:deadsnakes/ppa
        sudo apt update
        sudo apt install -y python3.10 python3.10-venv python3.10-distutils curl

        # Install pip if not available
        curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10

        # Navigate to the application directory
        cd /home/${{ secrets.AWS_SSH_USER }}/app/vehicle-registration-backend

        # Remove any existing venv directory to avoid conflicts
        rm -rf venv

        # Set up virtual environment and install dependencies
        python3.10 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

        # Start the FastAPI application
        nohup uvicorn main:app --host 0.0.0.0 --port 8000 &

        # Verify application is running
        sleep 5
        ps aux | grep uvicorn

        # Output the application logs
        tail -n 10 nohup.out
        EOF